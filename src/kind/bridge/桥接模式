将抽象与实现分离，使它们可以独立变化
聚合关系建立在抽象层，要求针对抽象化进行设计和开发

架构：抽象化角色、扩展抽象化角色、实体化、具体实现化角色

一个对象可以按照不同的类型进行分类  每一个类型就是一个维度，在桥接模式中，维度用接口定义，
维度的具体描述要实现这个接口并重写接口中的方法来给这个维度定义一个准确的描述

如果一个维度要引用另一个维度，那么这个维度用抽象类定义，类中要包含所引用维度的对象，

用接口定义的维度可以被用抽象类定义的维度引用

使用场景：当一个类内部具备两种或多种变化维度时，使用桥接模式可以解耦这些变化的维度，使高层代码架构稳定。
    桥接模式通常适用于以下场景。
        当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。
        当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。
        当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。

替换继承是常见使用场景

继承会强制把自己的属性附加给子类，强侵入性，父类入侵子类代码，子类代码臃肿，
设计模式中，优先使用组合/聚合而不是继承！！