方便处理简单对象和复合对象

将对象组合成树状的层次结构，用来表示“整体-部分”的关系 使用户对单个对象和组合对象具有一致性

根节点--树枝节点--叶子节点
根节点和树枝节点的本质是一种数据类型，可以作为容器使用，叶子节点和树枝节点不属于一种类型
组合模式中将树枝节点和叶子节点看作是同一种数据类型（用统一接口定义） 让他们具有一致行为

组合模式中整个树形结构的对象都属于同一种类型，用户不需要辨别节点的类型可以直接操作

架构：抽象构件角色、树叶构件角色、树枝构件角色/中间构件

透明式>>
    抽象构件声明了所有子类中的全部方法，客户端无需区别树枝对象和叶子对象，对客户端来说是透明的
    树叶构件没有Add()、Remove() 及 GetChild()方法，要实现他们会带来安全问题

安全式>>
    管理子构建的方法移到树枝构件中，抽象构件和树叶构件没有对子对象管理的方法，
    由于叶子和分支有不同的接口，客户端在调用的时候要知道树叶对象和树枝对象的存在  失去了透明性


应用场景：
    需要表示一个对象整体与部分的层次结构的场合、
    要求对用户隐藏组合对象和单个对象的不同，用户可以用统一的接口使用组合结构中所有对象的场合（多态）

扩展：将树枝和树叶抽象，树枝和树叶都可以拥有更多子节点，复杂的组合模式