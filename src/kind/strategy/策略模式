【对象行为模式】
完成一个流程有多种策略，择优
如果使用多重条件转移语句实现（硬编码），不但使条件语句变得很复杂，而且增加、删除或更换算法要修改源代码

定义：该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户
        它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理
            可以避免使用多重条件语句

架构：准备一组算法，并将这组算法封装到一系列的策略类里面，作为一个抽象策略类的子类，策略模式的中心不是如何实现算法，是怎么组织算法
     抽象策略类=>定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。
     具体策略类=>实现了抽象策略定义的接口，提供具体的算法实现。
     环境类=>持有一个策略类的引用，最终给客户端调用。

应用场景：
    一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。
    一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句。
    系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时。
    系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。
    多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。
