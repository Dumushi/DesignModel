【对象型行为模式】---行为类模式中最复杂的一种

适用于被处理的元素相对稳定而访问方式多种多样的数据结构
访问者模式能把处理方法从数据结构中分离出来，并可以根据需要
增加新的处理方法不用修改原来的代码和数据结构

定义：将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，
    为数据结构中的每个元素提供多种访问方式。它将对数据的操作与数据结构进行分离，是行为类模式中最复杂的一种模式。


架构：抽象访问者、具体访问者、抽象元素、具体元素、对象结构
    ·抽象访问者（Visitor）角色：定义一个访问具体元素的接口，为每个具体元素类对应一个访问操作 visit() ，该操作中的参数类型标识了被访问的具体元素。
    ·具体访问者（ConcreteVisitor）角色：实现抽象访问者角色中声明的各个访问操作，确定访问者访问一个元素时该做什么。
    ·抽象元素（Element）角色：声明一个包含接受操作 accept() 的接口，被接受的访问者对象作为 accept() 方法的参数。
    ·具体元素（ConcreteElement）角色：实现抽象元素角色提供的 accept() 操作，其方法体通常都是 visitor.visit(this) ，另外具体元素中可能还包含本身业务逻辑的相关操作。
    ·对象结构（Object Structure）角色：是一个包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法，通常由 List、Set、Map 等聚合类实现。


应用场景：当对集合中的不同类型数据（类型数量稳定）进行多种操作时，使用访问者模式
        ·对象结构相对稳定，但其操作算法经常变化的程序。
        ·对象结构中的对象需要提供多种不同且不相关的操作，而且要避免让这些操作的变化影响对象的结构。
        ·对象结构包含很多类型的对象，希望对这些对象实施一些依赖于其具体类型的操作。


执行流程：ObjectStructure.add（往对象结构中添加元素）=>
        ObjectStructure.accept（添加访问者访问对象结构）=>
        ConcreteElementA.accept（访问者到达元素类，访问具体元素）=>
        VisitorA.visit（先前创建的具体访问者开始访问元素的具体行为）=>
        ConcreteElementA.operation（元素的具体行为）


对象结构中添加元素 访问者通过对象结构访问元素

通常与迭代器模式、访问者模式一起用