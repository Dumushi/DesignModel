【对象行为模式】
将方法的请求者和实现者进行解耦

电视机遥控器（命令发送者）通过按钮（具体命令）来遥控电视机（命令接收者）。

定义：将一个请求封装成一个对象，使发请求的责任和处理请求的责任分隔开，这样两者之间通过命令对象进行沟通，这样方便将命令对象进行储存、传递、调用、增加与管理。

架构：抽象命令类、具体命令类、实现者/接收者、调用者/请求者
    抽象命令类（Command）角色：声明执行命令的接口，拥有执行命令的抽象方法 execute()。
    具体命令类（Concrete Command）角色：是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。
    实现者/接收者（Receiver）角色：执行命令功能的相关操作，是具体命令对象业务的真正实现者。
    调用者/请求者（Invoker）角色：是请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象来执行相关请求，它不直接访问接收者。


使用：定义命令（创建一个命令类的对象）--->发送命令（创建一个请求者对象，调用请求者的发送命令方法）

执行流程：Requester.sendCommand[发送命令]--->ConcreteCommand.excute[接收具体命令]--->Receiver.action[根据命令执行]

理解：将命令封装成对象，调用者将命令对象传递给实现者，实现者根据命令对象进行具体业务处理
       相当于事先定义好规则，在接收到请求的时候进行静态调用，一条命令对应一个实现者

应用场景：当系统的某项操作具备命令语义，且命令实现不稳定（变化）时，可以通过命令模式解耦请求与实现。使用抽象命令接口使请求方的代码架构稳定，
        封装接收方具体命令的实现细节。接收方与抽象命令呈现弱耦合（内部方法无需一致），具备良好的扩展性
        ·请求调用者需要与请求接收者解耦时，命令模式可以使调用者和接收者不直接交互。
        ·系统随机请求命令或经常增加、删除命令时，命令模式可以方便地实现这些功能。
        ·当系统需要执行一组操作时，命令模式可以定义宏命令来实现该功能。
        ·当系统需要支持命令的撤销（Undo）操作和恢复（Redo）操作时，可以将命令对象存储起来，采用备忘录模式来实现。