在软件开发过程中，应用程序中的部分对象可能会根据不同的情况做出不同的行为，我们把这种对象称为有状态的对象，
而把影响对象行为的一个或多个动态变化的属性称为状态。当有状态的对象与外部事件产生互动时，其内部状态就会发生改变，
从而使其行为也发生改变。如人都有高兴和伤心的时候，不同的情绪有不同的行为，当然外界也会影响其情绪变化。
【对象行为模式】

当控制一个对象状态转换的条件表达式过于复杂时，把相关“判断逻辑”提取出来，用各个不同的类进行表示，系统处于哪种情况，
直接使用相应的状态类对象进行处理，这样能把原来复杂的逻辑判断简单化，消除了 if-else、switch-case 等冗余语句，代码更有层次性，并且具备良好的扩展力

提取判断逻辑，用类来表示不同的结果

定义：对有状态的对象，把复杂的判断逻辑提取到不同的状态对象中，允许其状态对象在其内部状态发生改变时改变其行为

架构：环境类、抽象状态、具体状态
     ·环境类（Context）角色：也称为上下文，它定义了客户端需要的接口，内部维护一个当前状态，并负责具体状态的切换。
     ·抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为，可以有一个或多个行为。
     ·具体状态（Concrete State）角色：实现抽象状态所对应的行为，并且在需要的情况下进行状态切换。

应用场景：当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式。
        一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时

例如线程有五种状态、新建 就绪 运行 阻塞 死亡

当对象处于一种状态的时候，通过判断对象的行为设置对象的下一个状态

理解：将对象可能处于的状态抽离出来封装成类，在描述状态的类中处理对象在特定状态下的行为，当行为结束后通过逻辑指定对象的下一个状态
        需要有一个环境类来对对象的状态进行修改。

状态模式和责任链模式的区别：
    状态模式：A处于一种状态下一状态不固定，
    责任链模式：A执行完一条职责，下一条要执行的职责固定，按照固定的路线执行
状态模式和策略模式的区别：
    状态模式：一种状态执行一种行为，一般不同状态处理不同的事件
    策略模式：多种办法解决同一件事，每个策略解决的都是一样的业务