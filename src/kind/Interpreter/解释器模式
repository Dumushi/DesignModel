【类行为模式】
定义：给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解释器来解释语言中的句子
     也即是，用编译语言的方式来分析应用中的实例。这种模式实现了文法表达式处理的接口，该接口解释一个特定的上下文
    （文法：语言的规则;句子：语言集中的元素）

  ##1) 文法
    文法是用于描述语言的语法结构的形式规则。语言都有它自己的文法规则。例如，中文中的“句子”的文法如下。
    〈句子〉::=〈主语〉〈谓语〉〈宾语〉
    〈主语〉::=〈代词〉|〈名词〉
    〈谓语〉::=〈动词〉
    〈宾语〉::=〈代词〉|〈名词〉
    〈代词〉你|我|他
    〈名词〉大学生|英语
    〈动词〉::=是|学习

    注：这里的符号“::=”表示“定义为”的意思，用“〈”和“〉”括住的是非终结符，没有括住的是终结符。
  ##2) 句子
    句子是语言的基本单位，是语言集中的一个元素，它由终结符构成，能由“文法”推导出。例如，上述文法可以推出“我是大学生”，所以它是句子。
  ##3) 语法树
    语法树是句子结构的一种树型表示，它代表了句子的推导结果，它有利于理解句子语法结构的层次。

                                       【句子】
                          <主语>        <谓语>      <宾语>
                            |            |           |
                          <代词>        <动词>      <名词>
                            |            |           |
                            我           是          帅哥


架构：抽象表达式、终结符表达式、非终结符表达式、环境角色、客户端
     ·抽象表达式（Abstract Expression）角色：定义解释器的接口，约定解释器的解释操作，主要包含解释方法 interpret()。
     ·终结符表达式（Terminal Expression）角色：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应。
     ·非终结符表达式（Nonterminal Expression）角色：也是抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。
     ·环境（Context）角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。
     ·客户端（Client）：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。


解释器模式的关键是定义文法规则、设计终结符类与非终结符类、画出结构图，必要时构建语法树

